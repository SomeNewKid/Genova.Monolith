# Remove the line below if you want to inherit .editorconfig settings from higher directories
root = true

# C# files
[*.cs]

#### Core EditorConfig Options ####

# Indentation and spacing
indent_size = 4
indent_style = space
tab_width = 4

# New line preferences
end_of_line = crlf
insert_final_newline = false


#### .NET Code Actions ####

# Type members
dotnet_hide_advanced_members = false
dotnet_member_insertion_location = with_other_members_of_the_same_kind
dotnet_property_generation_behavior = prefer_throwing_properties

# Symbol search
dotnet_search_reference_assemblies = true


# -------------------------------------------------------------------------------------------------
#### .NET Coding Conventions ####
# -------------------------------------------------------------------------------------------------

# -------------------------------------------------------------------
### Organize usings
# -------------------------------------------------------------------
dotnet_separate_import_directive_groups = false:warning
dotnet_sort_system_directives_first = false:warning
file_header_template = unset:warning


# -------------------------------------------------------------------
### This preferences
# -------------------------------------------------------------------

# Do not use 'this.' to access instance fields
#
# IDE0009: dotnet_style_qualification_for_field = true
# ```
# this.capacity = 0;
# ```
#
# IDE0003: dotnet_style_qualification_for_field = false (default)
# ```
# capacity = 0;
# ```
dotnet_style_qualification_for_field = false:warning

# Do not use 'this.' to access instance properties
#
# IDE0009: dotnet_style_qualification_for_property = true
# ```
# this.ID = 0;
# ```
#
# IDE0003: dotnet_style_qualification_for_property = false (default)
# ```
# ID = 0;
# ```
dotnet_style_qualification_for_property = false:warning

# Do not use 'this.' to access instance methods
#
# IDE0009: dotnet_style_qualification_for_method = true
# ```
# this.Display();
# ```
#
# IDE0003: dotnet_style_qualification_for_method = false (default)
# ```
# Display();
# ```
dotnet_style_qualification_for_method = false:warning

# Do not use 'this.' to access instance events
#
# IDE0009: dotnet_style_qualification_for_event = true
# ```
# this.Elapsed += Handler;
# ```
#
# IDE0003: dotnet_style_qualification_for_event = false (default)
# ```
# Elapsed += Handler;
# ```
dotnet_style_qualification_for_event = false:warning


# -------------------------------------------------------------------
### Language keywords vs BCL types preferences
# -------------------------------------------------------------------

# Do use a C# language keyword (e.g., int) instead of the type name (e.g., Int32) for local variables, method parameters, and class members.
#
# IDE0049: dotnet_style_predefined_type_for_locals_parameters_members  = true (default)
# ```
# private int _member;
# ```
#
# IDE0049: dotnet_style_predefined_type_for_locals_parameters_members  = false
# ```
# private Int32 _member;
# ```
dotnet_style_predefined_type_for_locals_parameters_members = true:warning

# Do use a C# language keyword (e.g., int) instead of the type name (e.g., Int32) for member access expressions.
#
# IDE0049: dotnet_style_predefined_type_for_locals_parameters_members  = true (default)
# ```
# var local = int.MaxValue;
# ```
#
# IDE0049: dotnet_style_predefined_type_for_locals_parameters_members  = false
# ```
# var local = Int32.MaxValue;
# ```
dotnet_style_predefined_type_for_member_access = true:warning


# -------------------------------------------------------------------
### Parentheses preferences
# -------------------------------------------------------------------

# Use parentheses for clarity in arithmetic binary operators
#
# IDE0047: dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity (default)
# '''
# var result = (a + b) * c;
# '''
#
# IDE0047: dotnet_style_parentheses_in_arithmetic_binary_operators = never_if_unnecessary
# '''
# var result = a + b * c;
# '''
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:warning

# Use parentheses for clarity in other binary operators
#
# IDE0048: dotnet_style_parentheses_in_other_binary_operators = always_for_clarity (default)
# '''
# var result = (a && b) || c;
# '''
#
# IDE0048: dotnet_style_parentheses_in_other_binary_operators = never_if_unnecessary
# '''
# var result = a && b || c;
# '''
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:warning

# Use parentheses only when necessary in other operators
#
# IDE0049: dotnet_style_parentheses_in_other_operators = never_if_unnecessary (default)
# '''
# var result = a + (b * c);
# '''
#
# IDE0049: dotnet_style_parentheses_in_other_operators = always_for_clarity
# '''
# var result = (a + b) * c;
# '''
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:warning

# Use parentheses for clarity in relational binary operators
#
# IDE0047: dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity (default)
# '''
# var result = (a > b) == (c < d);
# '''
#
# IDE0047: dotnet_style_parentheses_in_relational_binary_operators = never_if_unnecessary
# '''
# var result = a > b == c < d;
# '''
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:warning


# -------------------------------------------------------------------
### Modifier preferences
# -------------------------------------------------------------------

# Require accessibility modifiers for non-interface members
#
# IDE0040: dotnet_style_require_accessibility_modifiers = for_non_interface_members (default)
# '''
# public class MyClass
# {
#     public int MyProperty { get; set; }
#     int myField; // Default is private
# }
# '''
#
# IDE0040: dotnet_style_require_accessibility_modifiers = always
# '''
# public class MyClass
# {
#     public int MyProperty { get; set; }
#     private int myField;
# }
# '''
dotnet_style_require_accessibility_modifiers = for_non_interface_members:warning


# -------------------------------------------------------------------
### Expression-level preferences
# -------------------------------------------------------------------

# Prefer System.HashCode for generating hash codes
#
# IDE0070: dotnet_prefer_system_hash_code = true (default)
# '''
# public override int GetHashCode()
# {
#     return System.HashCode.Combine(field1, field2);
# }
# '''
#
# IDE0070: dotnet_prefer_system_hash_code = false
# '''
# public override int GetHashCode()
# {
#     int hash = 17;
#     hash = hash * 31 + field1.GetHashCode();
#     hash = hash * 31 + field2.GetHashCode();
#     return hash;
# }
# '''
dotnet_prefer_system_hash_code = true:warning

# Prefer coalesce expression (??) over ternary operator for null checks
#
# IDE0029: dotnet_style_coalesce_expression = true (default)
# '''
# var result = value ?? "default";
# '''
#
# IDE0029: dotnet_style_coalesce_expression = false
# '''
# var result = value != null ? value : "default";
# '''
dotnet_style_coalesce_expression = true:warning

# Prefer collection initializer syntax
#
# IDE0028: dotnet_style_collection_initializer = true (default)
# '''
# var list = new List<int> { 1, 2, 3 };
# '''
#
# IDE0028: dotnet_style_collection_initializer = false
# '''
# var list = new List<int>();
# list.Add(1);
# list.Add(2);
# list.Add(3);
# '''
dotnet_style_collection_initializer = true:warning

# Prefer explicit tuple element names
#
# IDE0031: dotnet_style_explicit_tuple_names = true (default)
# '''
# var tuple = (name: "John", age: 30);
# '''
#
# IDE0031: dotnet_style_explicit_tuple_names = false
# '''
# var tuple = ("John", 30);
# '''
dotnet_style_explicit_tuple_names = true:warning

# Require namespace to match folder structure
#
# IDE0160: dotnet_style_namespace_match_folder = true (default)
# '''
# // File path: Project/Models/Person.cs
# namespace Project.Models
# {
#     public class Person { }
# }
# '''
#
# IDE0160: dotnet_style_namespace_match_folder = false
# '''
# // File path: Project/Models/Person.cs
# namespace MyCustomNamespace
# {
#     public class Person { }
# }
# '''
dotnet_style_namespace_match_folder = true:warning

# Prefer null propagation operator (?.) for null checks
#
# IDE0034: dotnet_style_null_propagation = true (default)
# '''
# var length = person?.Name?.Length;
# '''
#
# IDE0034: dotnet_style_null_propagation = false
# '''
# var length = person != null ? person.Name != null ? person.Name.Length : 0 : 0;
# '''
dotnet_style_null_propagation = true:warning

# Prefer object initializer syntax
#
# IDE0017: dotnet_style_object_initializer = true (default)
# '''
# var person = new Person { Name = "John", Age = 30 };
# '''
#
# IDE0017: dotnet_style_object_initializer = false
# '''
# var person = new Person();
# person.Name = "John";
# person.Age = 30;
# '''
dotnet_style_object_initializer = true:warning

# Prefer operator placement at the beginning of the line when wrapping
#
# IDE0055: dotnet_style_operator_placement_when_wrapping = beginning_of_line (default)
# '''
# var result = a
#     + b
#     + c;
# '''
#
# IDE0055: dotnet_style_operator_placement_when_wrapping = end_of_line
# '''
# var result = a +
#     b +
#     c;
# '''
dotnet_style_operator_placement_when_wrapping = beginning_of_line:warning

# Prefer auto-properties
#
# IDE0032: dotnet_style_prefer_auto_properties = true (default)
# '''
# public class Person
# {
#     public string Name { get; set; }
# }
# '''
#
# IDE0032: dotnet_style_prefer_auto_properties = false
# '''
# public class Person
# {
#     private string _name;
#     public string Name
#     {
#         get { return _name; }
#         set { _name = value; }
#     }
# }
# '''
dotnet_style_prefer_auto_properties = true:warning

# Prefer collection expressions when types loosely match
#
# IDE0062: dotnet_style_prefer_collection_expression = when_types_loosely_match (default)
# '''
# var numbers = new[] { 1, 2, 3 };
# '''
#
# IDE0062: dotnet_style_prefer_collection_expression = never
# '''
# var numbers = new int[] { 1, 2, 3 };
# '''
dotnet_style_prefer_collection_expression = when_types_loosely_match:warning

# Prefer compound assignment
#
# IDE0074: dotnet_style_prefer_compound_assignment = true (default)
# '''
# x += 1;
# '''
#
# IDE0074: dotnet_style_prefer_compound_assignment = false
# '''
# x = x + 1;
# '''
dotnet_style_prefer_compound_assignment = true:warning

# Prefer conditional expression over assignment
#
# IDE0045: dotnet_style_prefer_conditional_expression_over_assignment = true (default)
# '''
# var result = (condition) ? value1 : value2;
# '''
#
# IDE0045: dotnet_style_prefer_conditional_expression_over_assignment = false
# '''
# var result;
# if (condition)
# {
#     result = value1;
# }
# else
# {
#     result = value2;
# }
# '''
dotnet_style_prefer_conditional_expression_over_assignment = true:warning

# Prefer conditional expression over return statement
#
# IDE0046: dotnet_style_prefer_conditional_expression_over_return = true (default)
# '''
# return (condition) ? value1 : value2;
# '''
#
# IDE0046: dotnet_style_prefer_conditional_expression_over_return = false
# '''
# if (condition)
# {
#     return value1;
# }
# else
# {
#     return value2;
# }
# '''
dotnet_style_prefer_conditional_expression_over_return = true:warning

# Prefer explicit cast in foreach loop when strongly typed
#
# IDE0073: dotnet_style_prefer_foreach_explicit_cast_in_source = when_strongly_typed (default)
# '''
# foreach (DerivedType item in collection)
# {
#     // Use item
# }
# '''
#
# IDE0073: dotnet_style_prefer_foreach_explicit_cast_in_source = never
# '''
# foreach (var item in collection)
# {
#     var derivedItem = (DerivedType)item;
#     // Use derivedItem
# }
# '''
dotnet_style_prefer_foreach_explicit_cast_in_source = when_strongly_typed:warning

# Prefer inferred anonymous type member names
#
# IDE0037: dotnet_style_prefer_inferred_anonymous_type_member_names = true (default)
# '''
# var anonymousType = new { Name, Age };
# '''
#
# IDE0037: dotnet_style_prefer_inferred_anonymous_type_member_names = false
# '''
# var anonymousType = new { Name = Name, Age = Age };
# '''
dotnet_style_prefer_inferred_anonymous_type_member_names = true:warning

# Prefer inferred tuple element names
#
# IDE0038: dotnet_style_prefer_inferred_tuple_names = true (default)
# '''
# var tuple = (Name, Age);
# '''
#
# IDE0038: dotnet_style_prefer_inferred_tuple_names = false
# '''
# var tuple = (name: Name, age: Age);
# '''
dotnet_style_prefer_inferred_tuple_names = true:warning

# Prefer 'is null' check over 'ReferenceEquals' method
#
# IDE0078: dotnet_style_prefer_is_null_check_over_reference_equality_method = true (default)
# '''
# if (obj is null)
# {
#     // Do something
# }
# '''
#
# IDE0078: dotnet_style_prefer_is_null_check_over_reference_equality_method = false
# '''
# if (ReferenceEquals(obj, null))
# {
#     // Do something
# }
# '''
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:warning

# Prefer simplified boolean expressions
#
# IDE0075: dotnet_style_prefer_simplified_boolean_expressions = true (default)
# '''
# if (isTrue)
# {
#     // Do something
# }
# '''
#
# IDE0075: dotnet_style_prefer_simplified_boolean_expressions = false
# '''
# if (isTrue == true)
# {
#     // Do something
# }
# '''
dotnet_style_prefer_simplified_boolean_expressions = true:warning

# Prefer simplified string interpolation
#
# IDE0071: dotnet_style_prefer_simplified_interpolation = true (default)
# '''
# var message = $"Hello, {name}!";
# '''
#
# IDE0071: dotnet_style_prefer_simplified_interpolation = false
# '''
# var message = string.Format("Hello, {0}!", name);
# '''
dotnet_style_prefer_simplified_interpolation = true:warning



# -------------------------------------------------------------------
### Field preferences
# -------------------------------------------------------------------

# Prefer readonly fields
#
# IDE0044: dotnet_style_readonly_field = true (default)
# '''
# private readonly int _value;
# '''
#
# IDE0044: dotnet_style_readonly_field = false
# '''
# private int _value;
# '''
dotnet_style_readonly_field = true:warning


# -------------------------------------------------------------------
### Parameter preferences
# -------------------------------------------------------------------

# Flag all unused parameters
#
# IDE0060: dotnet_code_quality_unused_parameters = all (default)
# '''
# public void MyMethod(int usedParam, int unusedParam)
# {
#     Console.WriteLine(usedParam);
# }
# '''
#
# IDE0060: dotnet_code_quality_unused_parameters = non_public_methods
# '''
# private void MyMethod(int usedParam, int unusedParam)
# {
#     Console.WriteLine(usedParam);
# }
# '''
dotnet_code_quality_unused_parameters = all:warning


# Original code:
# ```
# System.Convert.ToInt32("35");
# ```
# 
# csharp_style_unused_value_expression_statement_preference = discard_variable
# ```
# _ = System.Convert.ToInt32("35");
# ```
# 
# csharp_style_unused_value_expression_statement_preference = unused_local_variable
# ```
# var unused = Convert.ToInt32("35");
# ```
csharp_style_unused_value_expression_statement_preference = unused_local_variable


# -------------------------------------------------------------------
### Suppression preferences
# -------------------------------------------------------------------

dotnet_remove_unnecessary_suppression_exclusions = none:warning

# -------------------------------------------------------------------
### New line preferences
# -------------------------------------------------------------------

dotnet_style_allow_multiple_blank_lines_experimental = true:warning
dotnet_style_allow_statement_immediately_after_block_experimental = true:warning


# -------------------------------------------------------------------------------------------------
#### C# Coding Conventions ####
# -------------------------------------------------------------------------------------------------

# -------------------------------------------------------------------
### Var preferences
# -------------------------------------------------------------------

# Do not use 'var' for built-in types
#
# IDE0007: csharp_style_var_for_built_in_types = false (default)
# '''
# int number = 5;
# '''
#
# IDE0007: csharp_style_var_for_built_in_types = true
# '''
# var number = 5;
# '''
csharp_style_var_for_built_in_types = false:warning

# Do not use 'var' elsewhere
#
# IDE0008: csharp_style_var_elsewhere = false (default)
# '''
# MyClass instance = new MyClass();
# '''
#
# IDE0008: csharp_style_var_elsewhere = true
# '''
# var instance = new MyClass();
# '''
csharp_style_var_elsewhere = false:warning

# Do not use 'var' when the type is apparent
#
# IDE0009: csharp_style_var_when_type_is_apparent = false (default)
# '''
# MyClass instance = new MyClass();
# '''
#
# IDE0009: csharp_style_var_when_type_is_apparent = true
# '''
# var instance = new MyClass();
# '''
csharp_style_var_when_type_is_apparent = false:warning


# -------------------------------------------------------------------
### Expression-bodied members
# -------------------------------------------------------------------

# Prefer expression-bodied accessors
#
# IDE0025: csharp_style_expression_bodied_accessors = true (default)
# '''
# public string Name
# {
#     get => _name;
#     set => _name = value;
# }
# '''
#
# IDE0025: csharp_style_expression_bodied_accessors = false
# '''
# public string Name
# {
#     get { return _name; }
#     set { _name = value; }
# }
# '''
csharp_style_expression_bodied_accessors = true:warning

# Do not prefer expression-bodied constructors
#
# IDE0021: csharp_style_expression_bodied_constructors = false (default)
# '''
# public MyClass()
# {
#     _value = 0;
# }
# '''
#
# IDE0021: csharp_style_expression_bodied_constructors = true
# '''
# public MyClass() => _value = 0;
# '''
csharp_style_expression_bodied_constructors = false:warning

# Prefer expression-bodied indexers
#
# IDE0026: csharp_style_expression_bodied_indexers = true (default)
# '''
# public int this[int index] => _array[index];
# '''
#
# IDE0026: csharp_style_expression_bodied_indexers = false
# '''
# public int this[int index]
# {
#     get { return _array[index]; }
# }
# '''
csharp_style_expression_bodied_indexers = true:warning

# Prefer expression-bodied lambdas
#
# IDE0028: csharp_style_expression_bodied_lambdas = true (default)
# '''
# Func<int, int> square = x => x * x;
# '''
#
# IDE0028: csharp_style_expression_bodied_lambdas = false
# '''
# Func<int, int> square = (x) => { return x * x; };
# '''
csharp_style_expression_bodied_lambdas = true:warning

# Do not prefer expression-bodied local functions
#
# IDE0029: csharp_style_expression_bodied_local_functions = false (default)
# '''
# int Add(int x, int y)
# {
#     return x + y;
# }
# '''
#
# IDE0029: csharp_style_expression_bodied_local_functions = true
# '''
# int Add(int x, int y) => x + y;
# '''
csharp_style_expression_bodied_local_functions = false:warning

# Do not prefer expression-bodied methods
#
# IDE0022: csharp_style_expression_bodied_methods = false (default)
# '''
# public int Add(int x, int y)
# {
#     return x + y;
# }
# '''
#
# IDE0022: csharp_style_expression_bodied_methods = true
# '''
# public int Add(int x, int y) => x + y;
# '''
csharp_style_expression_bodied_methods = false:warning

# Do not prefer expression-bodied operators
#
# IDE0023: csharp_style_expression_bodied_operators = false (default)
# '''
# public static MyClass operator +(MyClass a, MyClass b)
# {
#     return new MyClass(a.Value + b.Value);
# }
# '''
#
# IDE0023: csharp_style_expression_bodied_operators = true
# '''
# public static MyClass operator +(MyClass a, MyClass b) => new MyClass(a.Value + b.Value);
# '''
csharp_style_expression_bodied_operators = false:warning

# Prefer expression-bodied properties
#
# IDE0024: csharp_style_expression_bodied_properties = true (default)
# '''
# public int Value => _value;
# '''
#
# IDE0024: csharp_style_expression_bodied_properties = false
# '''
# public int Value
# {
#     get { return _value; }
# }
# '''
csharp_style_expression_bodied_properties = true:warning


# -------------------------------------------------------------------
### Pattern matching preferences
# -------------------------------------------------------------------

# Prefer pattern matching over 'as' with null check
#
# IDE0019: csharp_style_pattern_matching_over_as_with_null_check = true (default)
# '''
# if (obj is MyType myType)
# {
#     // Use myType
# }
# '''
#
# IDE0019: csharp_style_pattern_matching_over_as_with_null_check = false
# '''
# var myType = obj as MyType;
# if (myType != null)
# {
#     // Use myType
# }
# '''
csharp_style_pattern_matching_over_as_with_null_check = true:warning

# Prefer pattern matching over 'is' with cast check
#
# IDE0020: csharp_style_pattern_matching_over_is_with_cast_check = true (default)
# '''
# if (obj is MyType myType)
# {
#     // Use myType
# }
# '''
#
# IDE0020: csharp_style_pattern_matching_over_is_with_cast_check = false
# '''
# if (obj is MyType)
# {
#     var myType = (MyType)obj;
#     // Use myType
# }
# '''
csharp_style_pattern_matching_over_is_with_cast_check = true:warning

# Prefer extended property pattern
#
# IDE1008: csharp_style_prefer_extended_property_pattern = true (default)
# '''
# if (obj is { Property: { SubProperty: value } })
# {
#     // Use value
# }
# '''
#
# IDE1008: csharp_style_prefer_extended_property_pattern = false
# '''
# if (obj is MyType { Property: { SubProperty: value } })
# {
#     // Use value
# }
# '''
csharp_style_prefer_extended_property_pattern = true:warning

# Prefer 'not' pattern
#
# IDE0063: csharp_style_prefer_not_pattern = true (default)
# '''
# if (obj is not null)
# {
#     // Do something
# }
# '''
#
# IDE0063: csharp_style_prefer_not_pattern = false
# '''
# if (!(obj is null))
# {
#     // Do something
# }
# '''
csharp_style_prefer_not_pattern = true:warning

# Prefer pattern matching
#
# IDE0019: csharp_style_prefer_pattern_matching = true (default)
# '''
# if (obj is MyType myType)
# {
#     // Use myType
# }
# '''
#
# IDE0019: csharp_style_prefer_pattern_matching = false
# '''
# var myType = obj as MyType;
# if (myType != null)
# {
#     // Use myType
# }
# '''
csharp_style_prefer_pattern_matching = true:warning

# Prefer switch expression
#
# IDE0066: csharp_style_prefer_switch_expression = true (default)
# '''
# var result = obj switch
# {
#     MyType1 => value1,
#     MyType2 => value2,
#     _ => defaultValue
# };
# '''
#
# IDE0066: csharp_style_prefer_switch_expression = false
# '''
# var result;
# switch (obj)
# {
#     case MyType1:
#         result = value1;
#         break;
#     case MyType2:
#         result = value2;
#         break;
#     default:
#         result = defaultValue;
#         break;
# }
# '''
csharp_style_prefer_switch_expression = true:warning


# -------------------------------------------------------------------
### Null-checking preferences
# -------------------------------------------------------------------

# Prefer conditional delegate call
#
# IDE0030: csharp_style_conditional_delegate_call = true (default)
# '''
# myDelegate?.Invoke();
# '''
#
# IDE0030: csharp_style_conditional_delegate_call = false
# '''
# if (myDelegate != null)
# {
#     myDelegate.Invoke();
# }
# '''
csharp_style_conditional_delegate_call = true:warning


# -------------------------------------------------------------------
### Modifier preferences
# -------------------------------------------------------------------

# Prefer static anonymous functions
#
# IDE0039: csharp_prefer_static_anonymous_function = true (default)
# '''
# Func<int, int> square = static x => x * x;
# '''
#
# IDE0039: csharp_prefer_static_anonymous_function = false
# '''
# Func<int, int> square = x => x * x;
# '''
csharp_prefer_static_anonymous_function = true:warning

# Prefer static local functions
#
# IDE0040: csharp_prefer_static_local_function = true (default)
# '''
# static int Add(int x, int y) => x + y;
# '''
#
# IDE0040: csharp_prefer_static_local_function = false
# '''
# int Add(int x, int y) => x + y;
# '''
csharp_prefer_static_local_function = true:warning


# Prefer readonly structs
#
# IDE0042: csharp_style_prefer_readonly_struct = true (default)
# '''
# public readonly struct MyStruct
# {
#     public int Value { get; }
# }
# '''
#
# IDE0042: csharp_style_prefer_readonly_struct = false
# '''
# public struct MyStruct
# {
#     public int Value { get; }
# }
# '''
csharp_style_prefer_readonly_struct = true:warning

# Prefer readonly struct members
#
# IDE0043: csharp_style_prefer_readonly_struct_member = true (default)
# '''
# public struct MyStruct
# {
#     public readonly int Value { get; }
# }
# '''
#
# IDE0043: csharp_style_prefer_readonly_struct_member = false
# '''
# public struct MyStruct
# {
#     public int Value { get; }
# }
# '''
csharp_style_prefer_readonly_struct_member = true:warning

csharp_preferred_modifier_order = public,private,protected,internal,file,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,required,volatile,async:warning # IDE0041


# -------------------------------------------------------------------
### Code-block preferences
# -------------------------------------------------------------------

# Prefer braces for single-line control statements
#
# IDE0011: csharp_prefer_braces = true (default)
# '''
# if (condition)
# {
#     DoSomething();
# }
# '''
#
# IDE0011: csharp_prefer_braces = false
# '''
# if (condition) DoSomething();
# '''
csharp_prefer_braces = true:warning

# Do not prefer simple using statement
#
# IDE0063: csharp_prefer_simple_using_statement = false (default)
# '''
# using (var resource = new Resource())
# {
#     // Use resource
# }
# '''
#
# IDE0063: csharp_prefer_simple_using_statement = true
# '''
# using var resource = new Resource();
# // Use resource
# '''
csharp_prefer_simple_using_statement = false:warning

# Prefer System.Threading.Monitor for locking
#
# IDE0041: csharp_prefer_system_threading_lock = true (default)
# '''
# lock (lockObject)
# {
#     // Critical section
# }
# '''
#
# IDE0041: csharp_prefer_system_threading_lock = false
# '''
# System.Threading.Monitor.Enter(lockObject);
# try
# {
#     // Critical section
# }
# finally
# {
#     System.Threading.Monitor.Exit(lockObject);
# }
# '''
csharp_prefer_system_threading_lock = true:warning

# Prefer file-scoped namespace declarations
#
# IDE0160: csharp_style_namespace_declarations = file_scoped (default)
# '''
# namespace MyNamespace;
# 
# public class MyClass
# {
#     // Class members
# }
# '''
#
# IDE0160: csharp_style_namespace_declarations = block_scoped
# '''
# namespace MyNamespace
# {
#     public class MyClass
#     {
#         // Class members
#     }
# }
# '''
csharp_style_namespace_declarations = file_scoped:warning

# Prefer method group conversion
#
# IDE0009: csharp_style_prefer_method_group_conversion = true (default)
# '''
# Action action = MyMethod;
# '''
#
# IDE0009: csharp_style_prefer_method_group_conversion = false
# '''
# Action action = () => MyMethod();
# '''
csharp_style_prefer_method_group_conversion = true:warning

# Prefer primary constructors
#
# IDE1006: csharp_style_prefer_primary_constructors = true (default)
# '''
# public class MyClass(int value)
# {
#     public int Value { get; } = value;
# }
# '''
#
# IDE1006: csharp_style_prefer_primary_constructors = false
# '''
# public class MyClass
# {
#     public int Value { get; }
#     public MyClass(int value)
#     {
#         Value = value;
#     }
# }
# '''
csharp_style_prefer_primary_constructors = false:warning

# Prefer top-level statements
#
# IDE1007: csharp_style_prefer_top_level_statements = true (default)
# '''
# using System;
# 
# Console.WriteLine("Hello, World!");
# '''
#
# IDE1007: csharp_style_prefer_top_level_statements = false
# '''
# using System;
# 
# namespace MyNamespace
# {
#     class Program
#     {
#         static void Main(string[] args)
#         {
#             Console.WriteLine("Hello, World!");
#         }
#     }
# }
# '''
csharp_style_prefer_top_level_statements = false:warning

# -------------------------------------------------------------------
### Expression-level preferences
# -------------------------------------------------------------------

# Prefer simple default expression
#
# IDE0036: csharp_prefer_simple_default_expression = true (default)
# '''
# int[] array = default;
# '''
#
# IDE0036: csharp_prefer_simple_default_expression = false
# '''
# int[] array = new int[0];
# '''
csharp_prefer_simple_default_expression = true:warning

# Prefer deconstructed variable declaration
#
# IDE0042: csharp_style_deconstructed_variable_declaration = true (default)
# '''
# var (x, y) = point;
# '''
#
# IDE0042: csharp_style_deconstructed_variable_declaration = false
# '''
# (int x, int y) = point;
# '''
csharp_style_deconstructed_variable_declaration = true:warning

# Prefer implicit object creation when type is apparent
#
# IDE0090: csharp_style_implicit_object_creation_when_type_is_apparent = true (default)
# '''
# List<int> numbers = new();
# '''
#
# IDE0090: csharp_style_implicit_object_creation_when_type_is_apparent = false
# '''
# List<int> numbers = new List<int>();
# '''
csharp_style_implicit_object_creation_when_type_is_apparent = true:warning

# Prefer inlined variable declaration
#
# IDE0018: csharp_style_inlined_variable_declaration = true (default)
# '''
# if (int.TryParse(input, out var result))
# {
#     // Use result
# }
# '''
#
# IDE0018: csharp_style_inlined_variable_declaration = false
# '''
# int result;
# if (int.TryParse(input, out result))
# {
#     // Use result
# }
# '''
csharp_style_inlined_variable_declaration = true:warning

# Prefer index operator
#
# IDE0056: csharp_style_prefer_index_operator = true (default)
# '''
# var lastItem = array[^1];
# '''
#
# IDE0056: csharp_style_prefer_index_operator = false
# '''
# var lastItem = array[array.Length - 1];
# '''
csharp_style_prefer_index_operator = true:warning

# Prefer local function over anonymous function
#
# IDE0039: csharp_style_prefer_local_over_anonymous_function = true (default)
# '''
# int Add(int x, int y) => x + y;
# '''
#
# IDE0039: csharp_style_prefer_local_over_anonymous_function = false
# '''
# Func<int, int, int> add = (x, y) => x + y;
# '''
csharp_style_prefer_local_over_anonymous_function = true:warning

# Prefer null check over type check
#
# IDE0078: csharp_style_prefer_null_check_over_type_check = true (default)
# '''
# if (obj is null)
# {
#     // Do something
# }
# '''
#
# IDE0078: csharp_style_prefer_null_check_over_type_check = false
# '''
# if (obj == null)
# {
#     // Do something
# }
# '''
csharp_style_prefer_null_check_over_type_check = true:warning

# Prefer range operator
#
# IDE0057: csharp_style_prefer_range_operator = true (default)
# '''
# var slice = array[1..3];
# '''
#
# IDE0057: csharp_style_prefer_range_operator = false
# '''
# var slice = array.Skip(1).Take(2).ToArray();
# '''
csharp_style_prefer_range_operator = true:warning

# Prefer tuple swap
#
# IDE0180: csharp_style_prefer_tuple_swap = true (default)
# '''
# (a, b) = (b, a);
# '''
#
# IDE0180: csharp_style_prefer_tuple_swap = false
# '''
# var temp = a;
# a = b;
# b = temp;
# '''
csharp_style_prefer_tuple_swap = true:warning

# Prefer UTF-8 string literals
#
# IDE0064: csharp_style_prefer_utf8_string_literals = true (default)
# '''
# var utf8String = "text"u8;
# '''
#
# IDE0064: csharp_style_prefer_utf8_string_literals = false
# '''
# var utf8String = Encoding.UTF8.GetBytes("text");
# '''
csharp_style_prefer_utf8_string_literals = true:warning

# Prefer throw expression
#
# IDE0016: csharp_style_throw_expression = true (default)
# '''
# var value = condition ? result : throw new Exception();
# '''
#
# IDE0016: csharp_style_throw_expression = false
# '''
# if (condition)
# {
#     return result;
# }
# else
# {
#     throw new Exception();
# }
# '''
csharp_style_throw_expression = true:warning

# Prefer discard variable for unused value assignment
#
# IDE0059: csharp_style_unused_value_assignment_preference = discard_variable (default)
# '''
# _ = SomeMethod();
# '''
#
# IDE0059: csharp_style_unused_value_assignment_preference = unused_local
# '''
# var unused = SomeMethod();
# '''
csharp_style_unused_value_assignment_preference = unused_local_variable:warning

# Prefer discard variable for unused value expression statement
#
# IDE0059: csharp_style_unused_value_expression_statement_preference = discard_variable (default)
# '''
# _ = SomeMethod();
# '''
#
# IDE0059: csharp_style_unused_value_expression_statement_preference = unused_local
# '''
# var unused = SomeMethod();
# '''
csharp_style_unused_value_expression_statement_preference = discard_variable:warning


# -------------------------------------------------------------------
### 'Using' directive preferences
# -------------------------------------------------------------------

# Prefer 'using' directives outside namespace declarations
#
# IDE0065: csharp_using_directive_placement = outside_namespace (default)
# '''
# using System;
# 
# namespace MyNamespace
# {
#     public class MyClass
#     {
#         // Class members
#     }
# }
# '''
#
# IDE0065: csharp_using_directive_placement = inside_namespace
# '''
# namespace MyNamespace
# {
#     using System;
# 
#     public class MyClass
#     {
#         // Class members
#     }
# }
# '''
csharp_using_directive_placement = outside_namespace:warning


# -------------------------------------------------------------------
### New line preferences
# -------------------------------------------------------------------

# Allow blank line after colon in constructor initializer
#
# IDEXXXX: csharp_style_allow_blank_line_after_colon_in_constructor_initializer_experimental = true (default)
# '''
# public MyClass() :
# 
#     base()
# {
#     // Constructor body
# }
# '''
#
# IDEXXXX: csharp_style_allow_blank_line_after_colon_in_constructor_initializer_experimental = false
# '''
# public MyClass() :
#     base()
# {
#     // Constructor body
# }
# '''
csharp_style_allow_blank_line_after_colon_in_constructor_initializer_experimental = true

# Allow blank line after token in arrow expression clause
#
# IDEXXXX: csharp_style_allow_blank_line_after_token_in_arrow_expression_clause_experimental = true (default)
# '''
# public int MyProperty =>
# 
#     42;
# '''
#
# IDEXXXX: csharp_style_allow_blank_line_after_token_in_arrow_expression_clause_experimental = false
# '''
# public int MyProperty =>
#     42;
# '''
csharp_style_allow_blank_line_after_token_in_arrow_expression_clause_experimental = true

# Allow blank line after token in conditional expression
#
# IDEXXXX: csharp_style_allow_blank_line_after_token_in_conditional_expression_experimental = true (default)
# '''
# var result = condition ?
# 
#     value1 :
#     value2;
# '''
#
# IDEXXXX: csharp_style_allow_blank_line_after_token_in_conditional_expression_experimental = false
# '''
# var result = condition ?
#     value1 :
#     value2;
# '''
csharp_style_allow_blank_line_after_token_in_conditional_expression_experimental = true

# Allow blank lines between consecutive braces
#
# IDEXXXX: csharp_style_allow_blank_lines_between_consecutive_braces_experimental = true (default)
# '''
# public class MyClass
# {
# 
#     public void MyMethod()
#     {
# 
#     }
# 
# }
# '''
#
# IDEXXXX: csharp_style_allow_blank_lines_between_consecutive_braces_experimental = false
# '''
# public class MyClass
# {
#     public void MyMethod()
#     {
#     }
# }
# '''
csharp_style_allow_blank_lines_between_consecutive_braces_experimental = true

# Allow embedded statements on same line
#
# IDEXXXX: csharp_style_allow_embedded_statements_on_same_line_experimental = true (default)
# '''
# if (condition) DoSomething();
# '''
#
# IDEXXXX: csharp_style_allow_embedded_statements_on_same_line_experimental = false
# '''
# if (condition)
# {
#     DoSomething();
# }
# '''
csharp_style_allow_embedded_statements_on_same_line_experimental = true


# -------------------------------------------------------------------------------------------------
#### C# Formatting Rules ####
# -------------------------------------------------------------------------------------------------

# -------------------------------------------------------------------
### New line preferences
# -------------------------------------------------------------------

# New line before 'catch' block
#
# IDE0050: csharp_new_line_before_catch = true (default)
# '''
# try
# {
#     // Try block
# }
# catch (Exception ex)
# {
#     // Catch block
# }
# '''
#
# IDE0050: csharp_new_line_before_catch = false
# '''
# try
# {
#     // Try block
# } catch (Exception ex)
# {
#     // Catch block
# }
# '''
csharp_new_line_before_catch = true:warning

# New line before 'else' block
#
# IDE0051: csharp_new_line_before_else = true (default)
# '''
# if (condition)
# {
#     // If block
# }
# else
# {
#     // Else block
# }
# '''
#
# IDE0051: csharp_new_line_before_else = false
# '''
# if (condition)
# {
#     // If block
# } else
# {
#     // Else block
# }
# '''
csharp_new_line_before_else = true:warning

# New line before 'finally' block
#
# IDE0052: csharp_new_line_before_finally = true (default)
# '''
# try
# {
#     // Try block
# }
# finally
# {
#     // Finally block
# }
# '''
#
# IDE0052: csharp_new_line_before_finally = false
# '''
# try
# {
#     // Try block
# } finally
# {
#     // Finally block
# }
# '''
csharp_new_line_before_finally = true:warning

# New line before members in anonymous types
#
# IDE0053: csharp_new_line_before_members_in_anonymous_types = true (default)
# '''
# var anonymousType = new
# {
#     Name = "John",
#     Age = 30
# };
# '''
#
# IDE0053: csharp_new_line_before_members_in_anonymous_types = false
# '''
# var anonymousType = new {
#     Name = "John",
#     Age = 30
# };
# '''
csharp_new_line_before_members_in_anonymous_types = true:warning

# New line before members in object initializers
#
# IDE0054: csharp_new_line_before_members_in_object_initializers = true (default)
# '''
# var person = new Person
# {
#     Name = "John",
#     Age = 30
# };
# '''
#
# IDE0054: csharp_new_line_before_members_in_object_initializers = false
# '''
# var person = new Person {
#     Name = "John",
#     Age = 30
# };
# '''
csharp_new_line_before_members_in_object_initializers = true:warning

# New line before open brace
#
# IDE0055: csharp_new_line_before_open_brace = all (default)
# '''
# public class MyClass
# {
#     public void MyMethod()
#     {
#         // Method body
#     }
# }
# '''
#
# IDE0055: csharp_new_line_before_open_brace = none
# '''
# public class MyClass {
#     public void MyMethod() {
#         // Method body
#     }
# }
# '''
csharp_new_line_before_open_brace = all:warning

# New line between query expression clauses
#
# IDE0056: csharp_new_line_between_query_expression_clauses = true (default)
# '''
# var query = from item in collection
#             where item.IsActive
#             select item;
# '''
#
# IDE0056: csharp_new_line_between_query_expression_clauses = false
# '''
# var query = from item in collection where item.IsActive select item;
# '''
csharp_new_line_between_query_expression_clauses = true:warning


# -------------------------------------------------------------------
### Indentation preferences
# -------------------------------------------------------------------

# Indent block contents
#
# IDE0057: csharp_indent_block_contents = true (default)
# '''
# if (condition)
# {
#     DoSomething();
# }
# '''
#
# IDE0057: csharp_indent_block_contents = false
# '''
# if (condition)
# {
# DoSomething();
# }
# '''
csharp_indent_block_contents = true:warning

# Indent braces
#
# csharp_indent_braces = false (default)
# '''
# if (condition)
# {
#     DoSomething();
# }
# '''
#
# csharp_indent_braces = true
# '''
# if (condition)
#     {
#     DoSomething();
#     }
# '''
csharp_indent_braces = false:warning

# Indent case contents
#
# IDE0059: csharp_indent_case_contents = true (default)
# '''
# switch (value)
# {
#     case 1:
#         DoSomething();
#         break;
# }
# '''
#
# IDE0059: csharp_indent_case_contents = false
# '''
# switch (value)
# {
#     case 1:
#     DoSomething();
#     break;
# }
# '''
csharp_indent_case_contents = true:warning

# Indent case contents when block
#
# IDE0060: csharp_indent_case_contents_when_block = true (default)
# '''
# switch (value)
# {
#     case 1:
#     {
#         DoSomething();
#         break;
#     }
# }
# '''
#
# IDE0060: csharp_indent_case_contents_when_block = false
# '''
# switch (value)
# {
#     case 1:
#     {
#     DoSomething();
#     break;
#     }
# }
# '''
csharp_indent_case_contents_when_block = true:warning

# Indent labels
#
# IDE0061: csharp_indent_labels = one_less_than_current (default)
# '''
# switch (value)
# {
# case 1:
#     DoSomething();
#     break;
# }
# '''
#
# IDE0061: csharp_indent_labels = flush_left
# '''
# switch (value)
# {
# case 1:
# DoSomething();
# break;
# }
# '''
csharp_indent_labels = one_less_than_current:warning

# Indent switch labels
#
# IDE0062: csharp_indent_switch_labels = true (default)
# '''
# switch (value)
# {
#     case 1:
#         DoSomething();
#         break;
# }
# '''
#
# IDE0062: csharp_indent_switch_labels = false
# '''
# switch (value)
# {
# case 1:
#     DoSomething();
#     break;
# }
# '''
csharp_indent_switch_labels = true:warning


# -------------------------------------------------------------------
### Space preferences
# -------------------------------------------------------------------

# No space after cast
#
# IDE0041: csharp_space_after_cast = false (default)
# '''
# var value = (int)obj;
# '''
#
# IDE0041: csharp_space_after_cast = true
# '''
# var value = (int) obj;
# '''
csharp_space_after_cast = false:warning

# Space after colon in inheritance clause
#
# IDE0042: csharp_space_after_colon_in_inheritance_clause = true (default)
# '''
# public class MyClass : BaseClass
# {
# }
# '''
#
# IDE0042: csharp_space_after_colon_in_inheritance_clause = false
# '''
# public class MyClass :BaseClass
# {
# }
# '''
csharp_space_after_colon_in_inheritance_clause = true:warning

# Space after comma
#
# IDE0043: csharp_space_after_comma = true (default)
# '''
# var numbers = new[] { 1, 2, 3 };
# '''
#
# IDE0043: csharp_space_after_comma = false
# '''
# var numbers = new[] { 1,2,3 };
# '''
csharp_space_after_comma = true:warning

# No space after dot
#
# IDE0044: csharp_space_after_dot = false (default)
# '''
# var length = str.Length;
# '''
#
# IDE0044: csharp_space_after_dot = true
# '''
# var length = str. Length;
# '''
csharp_space_after_dot = false:warning

# Space after keywords in control flow statements
#
# IDE0045: csharp_space_after_keywords_in_control_flow_statements = true (default)
# '''
# if (condition)
# {
#     DoSomething();
# }
# '''
#
# IDE0045: csharp_space_after_keywords_in_control_flow_statements = false
# '''
# if(condition)
# {
#     DoSomething();
# }
# '''
csharp_space_after_keywords_in_control_flow_statements = true:warning

# Space after semicolon in for statement
#
# IDE0046: csharp_space_after_semicolon_in_for_statement = true (default)
# '''
# for (int i = 0; i < 10; i++)
# {
#     DoSomething();
# }
# '''
#
# IDE0046: csharp_space_after_semicolon_in_for_statement = false
# '''
# for (int i = 0;i < 10;i++)
# {
#     DoSomething();
# }
# '''
csharp_space_after_semicolon_in_for_statement = true:warning

# Space around binary operators
#
# IDE0047: csharp_space_around_binary_operators = before_and_after (default)
# '''
# var result = a + b;
# '''
#
# IDE0047: csharp_space_around_binary_operators = none
# '''
# var result = a+b;
# '''
csharp_space_around_binary_operators = before_and_after:warning

# No space around declaration statements
#
# IDE0048: csharp_space_around_declaration_statements = false (default)
# '''
# int number = 5;
# '''
#
# IDE0048: csharp_space_around_declaration_statements = true
# '''
# int number = 5 ;
# '''
csharp_space_around_declaration_statements = false:warning

# Space before colon in inheritance clause
#
# IDE0049: csharp_space_before_colon_in_inheritance_clause = true (default)
# '''
# public class MyClass : BaseClass
# {
# }
# '''
#
# IDE0049: csharp_space_before_colon_in_inheritance_clause = false
# '''
# public class MyClass: BaseClass
# {
# }
# '''
csharp_space_before_colon_in_inheritance_clause = true:warning

# No space before comma
#
# IDE0050: csharp_space_before_comma = false (default)
# '''
# var numbers = new[] { 1, 2, 3 };
# '''
#
# IDE0050: csharp_space_before_comma = true
# '''
# var numbers = new[] { 1 , 2 , 3 };
# '''
csharp_space_before_comma = false:warning

# No space before dot
#
# IDE0051: csharp_space_before_dot = false (default)
# '''
# var length = str.Length;
# '''
#
# IDE0051: csharp_space_before_dot = true
# '''
# var length = str .Length;
# '''
csharp_space_before_dot = false:warning

# No space before open square brackets
#
# IDE0052: csharp_space_before_open_square_brackets = false (default)
# '''
# var array = new int[5];
# '''
#
# IDE0052: csharp_space_before_open_square_brackets = true
# '''
# var array = new int [5];
# '''
csharp_space_before_open_square_brackets = false:warning

# No space before semicolon in for statement
#
# IDE0053: csharp_space_before_semicolon_in_for_statement = false (default)
# '''
# for (int i = 0; i < 10; i++)
# {
#     DoSomething();
# }
# '''
#
# IDE0053: csharp_space_before_semicolon_in_for_statement = true
# '''
# for (int i = 0 ; i < 10 ; i++)
# {
#     DoSomething();
# }
# '''
csharp_space_before_semicolon_in_for_statement = false:warning

# Use expression body for lambdas
#
# IDE0053: csharp_style_expression_bodied_lambdas = true
# ```
# Func<int, int> square = x => x * x;
# ```
#
# IDE0053: csharp_style_expression_bodied_lambdas = false
# ```
# Func<int, int> square = x => { return x * x; };
# ```
#

csharp_style_expression_bodied_lambdas = false

# No space between empty square brackets
#
# IDE0054: csharp_space_between_empty_square_brackets = false (default)
# '''
# var array = new int[5];
# '''
#
# IDE0054: csharp_space_between_empty_square_brackets = true
# '''
# var array = new int[ 5 ];
# '''
csharp_space_between_empty_square_brackets = false:warning

# No space between method call empty parameter list parentheses
#
# IDE0055: csharp_space_between_method_call_empty_parameter_list_parentheses = false (default)
# '''
# MyMethod();
# '''
#
# IDE0055: csharp_space_between_method_call_empty_parameter_list_parentheses = true
# '''
# MyMethod( );
# '''
csharp_space_between_method_call_empty_parameter_list_parentheses = false:warning

# No space between method call name and opening parenthesis
#
# IDE0056: csharp_space_between_method_call_name_and_opening_parenthesis = false (default)
# '''
# MyMethod();
# '''
#
# IDE0056: csharp_space_between_method_call_name_and_opening_parenthesis = true
# '''
# MyMethod ();
# '''
csharp_space_between_method_call_name_and_opening_parenthesis = false:warning

# No space between method call parameter list parentheses
#
# IDE0057: csharp_space_between_method_call_parameter_list_parentheses = false (default)
# '''
# MyMethod(param1, param2);
# '''
#
# IDE0057: csharp_space_between_method_call_parameter_list_parentheses = true
# '''
# MyMethod( param1, param2 );
# '''
csharp_space_between_method_call_parameter_list_parentheses = false:warning

# No space between method declaration empty parameter list parentheses
#
# csharp_space_between_method_declaration_empty_parameter_list_parentheses = false (default)
# '''
# public void MyMethod() { }
# '''
#
# csharp_space_between_method_declaration_empty_parameter_list_parentheses = true
# '''
# public void MyMethod( ) { }
# '''
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false:warning

# No space between method declaration name and opening parenthesis
#
# IDE0059: csharp_space_between_method_declaration_name_and_open_parenthesis = false (default)
# '''
# public void MyMethod() { }
# '''
#
# IDE0059: csharp_space_between_method_declaration_name_and_open_parenthesis = true
# '''
# public void MyMethod () { }
# '''
csharp_space_between_method_declaration_name_and_open_parenthesis = false:warning

# No space between method declaration parameter list parentheses
#
# IDE0060: csharp_space_between_method_declaration_parameter_list_parentheses = false (default)
# '''
# public void MyMethod(int param1, int param2) { }
# '''
#
# IDE0060: csharp_space_between_method_declaration_parameter_list_parentheses = true
# '''
# public void MyMethod( int param1, int param2 ) { }
# '''
csharp_space_between_method_declaration_parameter_list_parentheses = false:warning

# No space between parentheses
#
# IDE0061: csharp_space_between_parentheses = false (default)
# '''
# if (condition) { }
# '''
#
# IDE0061: csharp_space_between_parentheses = true
# '''
# if ( condition ) { }
# '''
csharp_space_between_parentheses = false:warning

# No space between square brackets
#
# IDE0062: csharp_space_between_square_brackets = false (default)
# '''
# var array = new int[5];
# '''
#
# IDE0062: csharp_space_between_square_brackets = true
# '''
# var array = new int[ 5 ];
# '''
csharp_space_between_square_brackets = false:warning


# -------------------------------------------------------------------
### Wrapping preferences
# -------------------------------------------------------------------

# Preserve single-line blocks
#
# IDE0063: csharp_preserve_single_line_blocks = true (default)
# '''
# if (condition) { DoSomething(); }
# '''
#
# IDE0063: csharp_preserve_single_line_blocks = false
# '''
# if (condition)
# {
#     DoSomething();
# }
# '''
csharp_preserve_single_line_blocks = true:warning

# Preserve single-line statements
#
# IDE0064: csharp_preserve_single_line_statements = true (default)
# '''
# if (condition) DoSomething();
# '''
#
# IDE0064: csharp_preserve_single_line_statements = false
# '''
# if (condition)
# {
#     DoSomething();
# }
# '''
csharp_preserve_single_line_statements = true:warning


# -------------------------------------------------------------------------------------------------
#### Naming styles ####
# -------------------------------------------------------------------------------------------------

# -------------------------------------------------------------------
### Naming rules
# -------------------------------------------------------------------

dotnet_naming_rule.interface_should_be_begins_with_i.severity = suggestion
dotnet_naming_rule.interface_should_be_begins_with_i.symbols = interface
dotnet_naming_rule.interface_should_be_begins_with_i.style = begins_with_i

dotnet_naming_rule.types_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.types_should_be_pascal_case.symbols = types
dotnet_naming_rule.types_should_be_pascal_case.style = pascal_case

dotnet_naming_rule.non_field_members_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.non_field_members_should_be_pascal_case.symbols = non_field_members
dotnet_naming_rule.non_field_members_should_be_pascal_case.style = pascal_case

# -------------------------------------------------------------------
### Symbol specifications
# -------------------------------------------------------------------

dotnet_naming_symbols.interface.applicable_kinds = interface
dotnet_naming_symbols.interface.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.interface.required_modifiers = 

dotnet_naming_symbols.types.applicable_kinds = class, struct, interface, enum
dotnet_naming_symbols.types.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.types.required_modifiers = 

dotnet_naming_symbols.non_field_members.applicable_kinds = property, event, method
dotnet_naming_symbols.non_field_members.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.non_field_members.required_modifiers = 

# -------------------------------------------------------------------
### Naming styles
# -------------------------------------------------------------------

dotnet_naming_style.pascal_case.required_prefix = 
dotnet_naming_style.pascal_case.required_suffix = 
dotnet_naming_style.pascal_case.word_separator = 
dotnet_naming_style.pascal_case.capitalization = pascal_case

dotnet_naming_style.begins_with_i.required_prefix = I
dotnet_naming_style.begins_with_i.required_suffix = 
dotnet_naming_style.begins_with_i.word_separator = 
dotnet_naming_style.begins_with_i.capitalization = pascal_case